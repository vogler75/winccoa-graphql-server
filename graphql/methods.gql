# API type - WinCC OA Node.js API (backward compatibility)
# Grouped by category for better organization

type API {
  """Alert-related functions"""
  alert: AlertMethods!

  """CNS (Central Navigation Service) functions"""
  cns: CnsMethods!

  """Data Point functions"""
  dp: DataPointMethods!

  """Data Point Type functions"""
  dpType: DataPointTypeMethods!

  """System functions"""
  system: SystemMethods!

  """Redundancy functions"""
  redundancy: RedundancyMethods!
}

"""Alert-related WinCC OA functions"""
type AlertMethods {
  """
  Retrieves the last alert attributes of a data point.

  @param alertsTime - Alert time(s) to retrieve
  @param dpeNames - Data point element names with alert config
  @param alertCount - Optional serial number of alert
  @returns Retrieved alert attribute values
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/alertGet.html
  """
  alertGet(alertsTime: [AlertTimeInput!]!, dpeNames: [String!]!, alertCount: Int): JSON!

  """
  Retrieves alert values for a specific time period.

  @param startTime - Start of the time interval
  @param endTime - End of the time interval
  @param names - Alert handling attribute names
  @returns Object with alert times and corresponding values
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/alertGetPeriod.html
  """
  alertGetPeriod(startTime: Time!, endTime: Time!, names: [String!]!): AlertPeriodResult!
}

"""CNS (Central Navigation Service) WinCC OA functions"""
type CnsMethods {
  """
  Returns paths of all views for given system.

  @param systemName - System name
  @returns Array of paths for all found views for systemName
  @throws WinccoaError when systemName does not exist
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetViews.html
  """
  getViews(systemName: String!): [String!]!

  """
  Returns ID paths of all trees in a view.

  @param view - View name
  @returns Array of tree paths
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetTrees.html
  """
  getTrees(view: String!): [String!]!

  """
  Returns paths of all children nodes for given path.

  @param cnsPath - ID path of the node
  @returns Array of child node paths
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetChildren.html
  """
  getChildren(cnsPath: String!): [String!]!

  """
  Returns parent node path for given path.

  @param cnsPath - ID path of the node
  @returns Parent node path
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetParent.html
  """
  getParent(cnsPath: String!): String!

  """
  Returns root node path of tree containing given node.

  @param cnsNodePath - ID path of the node
  @returns Root node ID path
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetRoot.html
  """
  getRoot(cnsNodePath: String!): String!

  """
  Returns display names for node with given path.

  @param cnsPath - CNS path for the node
  @returns Multi-language display names
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetDisplayNames.html
  """
  getDisplayNames(cnsPath: String!): JSON!

  """
  Returns display path for node with given path.

  @param cnsPath - CNS path for the node
  @returns Multi-language display path
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetDisplayPath.html
  """
  getDisplayPath(cnsPath: String!): JSON!

  """
  Returns data point element name linked with given path.

  @param cnsPath - CNS path of data point element
  @returns Data point element name or empty string
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetId.html
  """
  getId(cnsPath: String!): String!

  """
  Returns data point element names linked to nodes matching pattern.

  @param pattern - Search pattern with wildcards
  @param viewPath - Path to view to search (optional)
  @param searchMode - Search mode flags (optional)
  @param langIdx - Language index (optional)
  @param type - Node type filter (optional)
  @returns Array of data point element names
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetIdSet.html
  """
  getIdSet(pattern: String!, viewPath: String, searchMode: Int, langIdx: Int, type: Int): [String!]!

  """
  Returns CNS paths matching given pattern and criteria.

  @param pattern - Search pattern with wildcards
  @param viewPath - Path to view to search (optional)
  @param searchMode - Search mode flags (optional)
  @param langIdx - Language index (optional)
  @param type - Node type filter (optional)
  @returns Array of matching CNS paths
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetNodesByName.html
  """
  getNodesByName(pattern: String!, viewPath: String, searchMode: Int, langIdx: Int, type: Int): [String!]!

  """
  Returns CNS paths for nodes linked to given data point.

  @param dpName - Data point (element) name
  @param type - Node type filter (optional)
  @param viewPath - View path to search (optional)
  @returns Array of matching CNS paths
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetNodesByData.html
  """
  getNodesByData(dpName: String!, type: Int, viewPath: String): [String!]!

  """
  Returns property value for given key from node.

  @param cnsPath - CNS path of the node
  @param key - Property key
  @returns Property value
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetProperty.html
  """
  getProperty(cnsPath: String!, key: String!): JSON

  """
  Returns list of property keys for node.

  @param cnsPath - CNS path of the node
  @returns Array of property keys
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsGetPropertyKeys.html
  """
  getPropertyKeys(cnsPath: String!): [String!]!

  """
  Checks if node with given path exists.

  @param path - CNS ID path
  @returns Boolean indicating existence
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsNodeExists.html
  """
  nodeExists(path: String!): Boolean!

  """
  Checks if tree with given path exists.

  @param path - CNS ID path
  @returns Boolean indicating existence
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsTreeExists.html
  """
  treeExists(path: String!): Boolean!

  """
  Checks if view with given path exists.

  @param path - CNS ID path
  @returns Boolean indicating existence
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsViewExists.html
  """
  viewExists(path: String!): Boolean!

  """
  Checks if path is a node.

  @param path - CNS ID path
  @returns Boolean indicating if path is node
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsIsNode.html
  """
  isNode(path: String!): Boolean!

  """
  Checks if path is a tree.

  @param path - CNS ID path
  @returns Boolean indicating if path is tree
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsIsTree.html
  """
  isTree(path: String!): Boolean!

  """
  Checks if path is a view.

  @param path - CNS ID path
  @returns Boolean indicating if path is view
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsIsView.html
  """
  isView(path: String!): Boolean!

  """
  Checks if ID is valid CNS ID.

  @param id - ID to check
  @returns Boolean indicating validity
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsCheckId.html
  """
  checkId(id: String!): Boolean!

  """
  Checks if name is valid CNS display name.

  @param name - Display name to check
  @returns Number (0=valid, -1=incomplete, -2=invalid chars)
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsCheckName.html
  """
  checkName(name: JSON!): Int!

  """
  Checks if separator is valid CNS separator.

  @param separator - Separator to check
  @returns Boolean indicating validity
  @throws WinccoaError when invalid parameters
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/CNS_Ctrl/cnsCheckSeparator.html
  """
  checkSeparator(separator: String!): Boolean!
}

"""Data Point WinCC OA functions"""
type DataPointMethods {
  """
  Retrieves the current values of one or more data point elements.

  @param dpeNames - Data point element name(s) of the values to get
  @returns Promise that resolves to the current value(s) of the DPE(s)
  @throws WinccoaError when DPE does not exist or current user has no read access to it
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGet.html
  """
  get(dpeNames: [String!]!): JSON!

  """
  Returns all the data point names or the data point element names that match a pattern in alphabetical order.

  @param dpPattern - Search pattern. When an empty pattern is given (=default), then returns all data points.
                     Wildcards are used to filter data point name. The characters '*' and '?' are used,
                     where the asterisk ('*') replaces any number of characters and the question mark '?' stands for just one character.
  @param dpType - Data point type. Allows to restrict the returned data points to a specific data point type.
  @param ignoreCase - Defines if the search should ignore the casing of the search pattern (=true) or not (=false, default)
  @returns List with data points or data point element names
  @throws WinccoaError when invalid argument type is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpNames.html
  """
  names(dpPattern: String, dpType: String, ignoreCase: Boolean): [String!]!

  """
  Returns all or selected data point types from the current project.

  @param pattern - Pattern for the returned DPTs. When an empty pattern is given (=default), then returns all DP types.
                   Wildcards are used to filter data point type name. The characters '*' and '?' are used,
                   where the asterisk ('*') replaces any number of characters and the question mark '?' stands for just one character.
  @param systemId - The desired system if querying from other systems. Optional parameter. If this parameter is not defined, the own system is queried.
  @param includeEmpty - When this is set to false, data point types without existing data points will be ignored.
  @returns String array with all DP type names
  @throws WinccoaError when invalid argument type or non-existing systemId is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpTypes.html
  """
  types(pattern: String, systemId: Int, includeEmpty: Boolean): [String!]!

  """
  Returns the value(s) of one or more data point elements from the driver if older than specified age.
  This function is available for the OPC UA Client, Modbus, S7Plus, SNMP, OPC drivers and S-Bus driver.

  @param age - The maximum age of the value in milliseconds. When value is older than age, then value from the driver is returned.
  @param dpeNames - Data point element name(s) whose value is queried
  @returns Promise that resolves to the current value(s) of the DPE(s)
  @throws WinccoaError when DPE does not exist or current user has no read access to it
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetMaxAge.html
  """
  getMaxAge(age: Int!, dpeNames: [String!]!): JSON!

  """
  Returns the data type of a specific data point element.

  @param dpeName - Name of the data point element
  @returns Type of a data point element
  @throws WinccoaError when data point with the given dpeName is not found or invalid argument type
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpElementType.html
  """
  elementType(dpeName: String!): ElementType!

  """
  Returns the data type of a data point attribute.

  @param dpAttributeName - Name of the data point attribute
  @returns Type of the data point attribute
  @throws WinccoaError when invalid argument type is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpAttributeType.html
  """
  attributeType(dpAttributeName: String!): CtrlType!

  """
  Returns the data point type for a given data point name.

  @param dp - Name of the data point (for example, "ExampleDP_Trend1")
  @returns Data Point Type name
  @throws WinccoaError when invalid argument type or dp does not exist
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpTypeName.html
  """
  typeName(dp: String!): String!

  """
  Returns the type reference of a selected data point element.

  @param dpe - Name of the data point element (for example, "_mp_PUMP1.state.mode")
  @returns Empty string or type reference as string
  @throws WinccoaError when invalid argument type or dpe does not exist
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpTypeRefName.html
  """
  typeRefName(dpe: String!): String!

  """
  Checks the existence of a valid data point identifier.

  @param dpeName - A data point identifier: a sys, a DPT, a DP, a DPE, a config, a detail or an attr
  @returns true if at least one part of a data point identifier can be resolved correctly, otherwise false
  @throws WinccoaError when invalid argument type is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpExists.html
  """
  exists(dpeName: String!): Boolean!

  """
  Queries DP attributes over a specified period of time.

  @param startTime - The start time of the interval from which values should be returned
  @param endTime - The end time of the interval from which values should be returned
  @param dpeNames - Single or multiple Data Points in an array
  @returns Promise will be resolved to data for the given DPEs if successful. It consists of an array of results (one for each DPE, in the order they are given in dpeNames), each result contains two arrays, one for the values and one for the corresponding value change timestamps
  @throws WinccoaError when empty data point list or data point not found
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetPeriod.html
  """
  getPeriod(startTime: Time!, endTime: Time!, dpeNames: [String!]!): JSON!

  """
  Retrieves attribute values with the help of SQL statements.
  Returns a table-like structure where [0][0] is empty, [0][1..n] are column headers,
  and [1..n][0] are line names (data point names), [1..n][1..n] are the values.

  @param query - SQL statement
  @returns Promise that resolves to table-like structure with query results
  @throws WinccoaError when invalid parameter or query string is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpQuery.html
  """
  query(query: String!): [[JSON!]!]!

  """
  Returns the alias/display name of a data point or data point element.

  @param dpeName - Data point or data point element name
  @returns Alias string or null if not set
  @throws WinccoaError when invalid argument type or dpe does not exist
  """
  getAlias(dpeName: String!): String

  """
  Returns the description of a data point or data point element.

  @param dpeName - Data point or data point element name
  @returns Description string or null if not set
  @throws WinccoaError when invalid argument type or dpe does not exist
  """
  getDescription(dpeName: String!): String

  """
  Returns the format string of a data point or data point element.

  @param dpeName - Data point or data point element name
  @returns Format string or null if not set
  @throws WinccoaError when invalid argument type or dpe does not exist
  """
  getFormat(dpeName: String!): String

  """
  Returns the unit/measurement unit of a data point or data point element.

  @param dpeName - Data point or data point element name
  @returns Unit string or null if not set
  @throws WinccoaError when invalid argument type or dpe does not exist
  """
  getUnit(dpeName: String!): String
}

"""Data Point Type WinCC OA functions"""
type DataPointTypeMethods {
  """
  Retrieves the structure of a data point type.

  @param dpt - Data point type
  @param includeSubTypes - true: subtypes will be passed
  @returns Data point type structure as a tree
  @throws WinccoaError when invalid argument type or dpt does not exist
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpTypeGet.html
  """
  dpTypeGet(dpt: String!, includeSubTypes: Boolean): JSON!

  """
  Returns all references to other DPTs in a DPT.

  @param dpt - Name of the data point type to be checked for references
  @returns Object containing two arrays with references and their corresponding data point element paths
  @throws WinccoaError when invalid argument type or dpt does not exist
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetDpTypeRefs.html
  """
  dpGetDpTypeRefs(dpt: String!): DpTypeReferences!

  """
  Returns all DPTs and DPs that contain the specified DPT as a reference.

  @param reference - Name of the DPT reference to check data point types and data points for
  @returns Object containing two arrays with DPT names and the corresponding data point element paths
  @throws WinccoaError when invalid argument type
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlA_D/dpGetRefsToDpType.html
  """
  dpGetRefsToDpType(reference: String!): DpTypeReferences!
}

"""System information WinCC OA functions"""
type SystemMethods {
  """
  Returns the system ID for a specified system or the current system.

  @param systemName - The name of the system (optional). If not given, returns the system ID of its own system
  @returns The system ID
  @throws WinccoaError when invalid system name is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/getSystemId.html
  """
  getSystemId(systemName: String): Int!

  """
  Returns the system name for a specified system ID or the current system.

  @param systemId - System ID (optional). If not given, returns the system name of its own system
  @returns The system name
  @throws WinccoaError when invalid system ID is given
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/getSystemName.html
  """
  getSystemName(systemId: Int): String!

  """
  Returns information about current API and WinCC OA versions.

  @returns API and WinCC OA versions
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/getVersionInfo.html
  """
  getVersionInfo: WinccoaVersionDetails!
}

"""Redundancy WinCC OA functions"""
type RedundancyMethods {
  """
  Checks if the event manager to which this manager is connected is currently the active REDU partner.

  @returns true if the event manager is currently the active REDU partner
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/isReduActive.html
  """
  isReduActive: Boolean!

  """
  Checks whether the project has been configured as redundant.

  @returns true if project has been configured as redundant
  @see https://www.winccoa.com/documentation/WinCCOA/latest/en_US/ControlE_R/isRedundant.html
  """
  isRedundant: Boolean!
}

# Supporting types for Methods namespace (V1 compatibility)
type WinccoaVersionDetails {
  api: WinccoaApiVersion!
  winccoa: WinccoaSystemVersion!
}

type WinccoaApiVersion {
  version: Int!
}

type WinccoaSystemVersion {
  display: String!
  major: Int!
  minor: Int!
  numeric: Int!
  numeric_full: Int!
  patch: Int!
  platform: String!
  revision: Int!
  version: String!
}



type DpTypeReferences {
  dptNames: [String!]!
  dpePaths: [String!]!
}
