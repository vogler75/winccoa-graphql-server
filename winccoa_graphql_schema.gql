# WinCC OA Detailed GraphQL Schema

"""
Scalar type representing JSON data - used for flexible data handling
"""
scalar JSON

"""
Scalar type representing multi-language strings in WinCC OA
"""
scalar LangString

"""
Scalar type representing time values in WinCC OA
"""
scalar Time

# Enums
enum ElementType {
  BOOL
  UINT8  
  INT32
  INT64
  FLOAT
  DOUBLE
  BIT
  BIT32
  BIT64
  STRING
  TIME
  DPID
  LANGSTRING
  BLOB
  MIXED
  DYN_BOOL
  DYN_UINT8
  DYN_INT32
  DYN_INT64
  DYN_FLOAT
  DYN_DOUBLE
  DYN_BIT
  DYN_BIT32
  DYN_BIT64
  DYN_STRING
  DYN_TIME
  DYN_DPID
  DYN_LANGSTRING
  DYN_BLOB
}

enum CtrlType {
  TIME_VAR
  BOOL_VAR
  INT_VAR
  UINT_VAR
  FLOAT_VAR
  STRING_VAR
  BIT32_VAR
  CHAR_VAR
  DYN_TIME_VAR
  DYN_BOOL_VAR
  DYN_INT_VAR
  DYN_UINT_VAR
  DYN_FLOAT_VAR
  DYN_STRING_VAR
  DYN_BIT32_VAR
  DYN_CHAR_VAR
  DYN_DYN_TIME_VAR
  DYN_DYN_BOOL_VAR
  DYN_DYN_INT_VAR
  DYN_DYN_UINT_VAR
  DYN_DYN_FLOAT_VAR
  DYN_DYN_STRING_VAR
  DYN_DYN_BIT32_VAR
  DYN_DYN_CHAR_VAR
  ATIME_VAR
  DYN_ATIME_VAR
  DYN_DYN_ATIME_VAR
  LANGSTRING_VAR
  DYN_LANGSTRING_VAR
  DYN_DYN_LANGSTRING_VAR
  BLOB_VAR
  LONG_VAR
  DYN_LONG_VAR
  DYN_DYN_LONG_VAR
  ULONG_VAR
  DYN_ULONG_VAR
  DYN_DYN_ULONG_VAR
  BIT64_VAR
  DYN_BIT64_VAR
  DYN_DYN_BIT64_VAR
}

"""
Query methods for retrieving data point and system information
"""
type Query {
  """
  Retrieves the current values of one or more data point elements
  
  @param dpeNames - Names of the data point elements to retrieve
  @returns Values of the specified data point elements
  """
  dpGet(dpeNames: [String!]!): JSON!

  """
  Returns all the data point names or data point element names that match a pattern
  
  @param dpPattern - Search pattern for data point names (optional)
  @param dpType - Specific data point type to filter (optional)
  @param ignoreCase - Whether the search should be case-insensitive (default: false)
  @returns List of matching data point names
  """
  dpNames(dpPattern: String, dpType: String, ignoreCase: Boolean): [String!]!

  """
  Returns all or selected data point types from the current project
  
  @param pattern - Pattern to filter data point types (optional)
  @param systemId - System ID to query (optional, default: own system)
  @param includeEmpty - Whether to include types without existing data points (default: true)
  @returns List of data point type names
  """
  dpTypes(pattern: String, systemId: Int, includeEmpty: Boolean): [String!]!

  """
  Returns the value of data point elements from the driver if older than specified age
  
  @param age - Maximum age of the value in milliseconds
  @param dpeNames - Data point elements to query
  @returns Current values of the specified data point elements
  """
  dpGetMaxAge(age: Int!, dpeNames: [String!]!): JSON!

  """
  Returns the data type of a specific data point element
  
  @param dpeName - Name of the data point element
  @returns Element type of the data point element
  """
  dpElementType(dpeName: String!): ElementType!

  """
  Returns the data type of a data point attribute
  
  @param dpAttributeName - Name of the data point attribute
  @returns CTRL type of the attribute
  """
  dpAttributeType(dpAttributeName: String!): CtrlType!

  """
  Returns the data point type for a given data point name
  
  @param dp - Name of the data point
  @returns Name of the data point type
  """
  dpTypeName(dp: String!): String!

  """
  Returns the type reference of a selected data point element
  
  @param dpe - Name of the data point element
  @returns Type reference name or empty string
  """
  dpTypeRefName(dpe: String!): String!

  """
  Checks whether a data point exists
  
  @param dpeName - Name of the data point element
  @returns Boolean indicating existence of the data point
  """
  dpExists(dpeName: String!): Boolean!

  """
  Returns historic values of data point elements within a specified time period
  
  @param startTime - Start of the time interval in ISO 8601 format (e.g., "2024-01-01T00:00:00Z")
  @param endTime - End of the time interval in ISO 8601 format (e.g., "2024-01-01T23:59:59Z")
  @param dpeNames - Names of the data point elements to query
  @returns Historic values with timestamps
  """
  dpGetPeriod(startTime: Time!, endTime: Time!, dpeNames: [String!]!): JSON!

  """
  Retrieves the last alert attributes of a data point
  
  @param alertsTime - Alert time(s) to retrieve
  @param dpeNames - Data point element names with alert config
  @param alertCount - Optional serial number of alert
  @returns Retrieved alert attribute values
  """
  alertGet(alertsTime: [AlertTimeInput!]!, dpeNames: [String!]!, alertCount: Int): JSON!

  """
  Retrieves alert values for a specific time period
  
  @param startTime - Start of the time interval
  @param endTime - End of the time interval
  @param names - Alert handling attribute names
  @returns Object with alert times and corresponding values
  """
  alertGetPeriod(startTime: Time!, endTime: Time!, names: [String!]!): AlertPeriodResult!

  """
  Checks if the event manager is currently the active redundancy partner
  
  @returns Boolean indicating if redundancy is active
  """
  isReduActive: Boolean!

  """
  Checks whether the project has been configured as redundant
  
  @returns Boolean indicating if project is configured for redundancy
  """
  isRedundant: Boolean!

  """
  Returns the system ID for a specified system or the current system
  
  @param systemName - Optional name of the system
  @returns System ID number
  """
  getSystemId(systemName: String): Int!

  """
  Returns the system name for a specified system ID or the current system
  
  @param systemId - Optional system ID
  @returns System name
  """
  getSystemName(systemId: Int): String!

  """
  Returns information about current API and WinCC OA versions
  
  @returns Version information object
  """
  getVersionInfo: WinccoaVersionDetails!

  # CNS (Central Navigation Service) Query Functions
  
  """
  Returns paths of all views for given system
  
  @param systemName - System name
  @returns Array of view paths
  """
  cnsGetViews(systemName: String!): [String!]!

  """
  Returns ID paths of all trees in a view
  
  @param view - View name
  @returns Array of tree paths
  """
  cnsGetTrees(view: String!): [String!]!

  """
  Returns paths of all children nodes for given path
  
  @param cnsPath - ID path of the node
  @returns Array of child node paths
  """
  cnsGetChildren(cnsPath: String!): [String!]!

  """
  Returns parent node path for given path
  
  @param cnsPath - ID path of the node
  @returns Parent node path
  """
  cnsGetParent(cnsPath: String!): String!

  """
  Returns root node path of tree containing given node
  
  @param cnsNodePath - ID path of the node
  @returns Root node ID path
  """
  cnsGetRoot(cnsNodePath: String!): String!

  """
  Returns display names for node with given path
  
  @param cnsPath - CNS path for the node
  @returns Multi-language display names
  """
  cnsGetDisplayNames(cnsPath: String!): JSON!

  """
  Returns display path for node with given path
  
  @param cnsPath - CNS path for the node
  @returns Multi-language display path
  """
  cnsGetDisplayPath(cnsPath: String!): JSON!

  """
  Returns data point element name linked with given path
  
  @param cnsPath - CNS path of data point element
  @returns Data point element name or empty string
  """
  cnsGetId(cnsPath: String!): String!

  """
  Returns data point element names linked to nodes matching pattern
  
  @param pattern - Search pattern with wildcards
  @param viewPath - Path to view to search (optional)
  @param searchMode - Search mode flags (optional)
  @param langIdx - Language index (optional)
  @param type - Node type filter (optional)
  @returns Array of data point element names
  """
  cnsGetIdSet(pattern: String!, viewPath: String, searchMode: Int, langIdx: Int, type: Int): [String!]!

  """
  Returns CNS paths matching given pattern and criteria
  
  @param pattern - Search pattern with wildcards
  @param viewPath - Path to view to search (optional)
  @param searchMode - Search mode flags (optional)
  @param langIdx - Language index (optional)
  @param type - Node type filter (optional)
  @returns Array of matching CNS paths
  """
  cnsGetNodesByName(pattern: String!, viewPath: String, searchMode: Int, langIdx: Int, type: Int): [String!]!

  """
  Returns CNS paths for nodes linked to given data point
  
  @param dpName - Data point (element) name
  @param type - Node type filter (optional)
  @param viewPath - View path to search (optional)
  @returns Array of matching CNS paths
  """
  cnsGetNodesByData(dpName: String!, type: Int, viewPath: String): [String!]!

  """
  Returns property value for given key from node
  
  @param cnsPath - CNS path of the node
  @param key - Property key
  @returns Property value
  """
  cnsGetProperty(cnsPath: String!, key: String!): JSON

  """
  Returns list of property keys for node
  
  @param cnsPath - CNS path of the node
  @returns Array of property keys
  """
  cnsGetPropertyKeys(cnsPath: String!): [String!]!

  """
  Checks if node with given path exists
  
  @param path - CNS ID path
  @returns Boolean indicating existence
  """
  cnsNodeExists(path: String!): Boolean!

  """
  Checks if tree with given path exists
  
  @param path - CNS ID path
  @returns Boolean indicating existence
  """
  cnsTreeExists(path: String!): Boolean!

  """
  Checks if view with given path exists
  
  @param path - CNS ID path
  @returns Boolean indicating existence
  """
  cnsViewExists(path: String!): Boolean!

  """
  Checks if path is a node
  
  @param path - CNS ID path
  @returns Boolean indicating if path is node
  """
  cnsIsNode(path: String!): Boolean!

  """
  Checks if path is a tree
  
  @param path - CNS ID path
  @returns Boolean indicating if path is tree
  """
  cnsIsTree(path: String!): Boolean!

  """
  Checks if path is a view
  
  @param path - CNS ID path
  @returns Boolean indicating if path is view
  """
  cnsIsView(path: String!): Boolean!

  """
  Checks if ID is valid CNS ID
  
  @param id - ID to check
  @returns Boolean indicating validity
  """
  cnsCheckId(id: String!): Boolean!

  """
  Checks if name is valid CNS display name
  
  @param name - Display name to check
  @returns Number (0=valid, -1=incomplete, -2=invalid chars)
  """
  cnsCheckName(name: JSON!): Int!

  """
  Checks if separator is valid CNS separator
  
  @param separator - Separator to check
  @returns Boolean indicating validity
  """
  cnsCheckSeparator(separator: String!): Boolean!
}

"""
Mutations for creating, modifying, and deleting data points
"""
type Mutation {
  """
  Creates a new data point
  
  @param dpeName - Name of the data point to create
  @param dpType - Type of the data point
  @param systemId - Optional system ID for distributed systems
  @param dpId - Optional specific data point ID
  @returns Boolean indicating successful creation
  """
  dpCreate(dpeName: String!, dpType: String!, systemId: Int, dpId: Int): Boolean!

  """
  Deletes an existing data point
  
  @param dpName - Name of the data point to delete
  @returns Boolean indicating successful deletion
  """
  dpDelete(dpName: String!): Boolean!

  """
  Copies a data point including its configuration
  
  @param source - Name of the source data point
  @param destination - Name of the new copied data point
  @param driver - Optional driver number (default 1)
  @returns Boolean indicating successful copy
  """
  dpCopy(source: String!, destination: String!, driver: Int): Boolean!

  """
  Sets the value of one or more data point elements
  
  @param dpeNames - Names of the data point elements to set
  @param values - Values to set for the data point elements
  @returns Boolean indicating successful setting of values
  """
  dpSet(dpeNames: [String!]!, values: [JSON!]!): Boolean!

  """
  Sets values with waiting for confirmation
  
  @param dpeNames - Names of the data point elements to set
  @param values - Values to set for the data point elements
  @returns Boolean indicating successful setting of values
  """
  dpSetWait(dpeNames: [String!]!, values: [JSON!]!): Boolean!

  """
  Sets values with a specific timestamp
  
  @param time - Source time for the value change
  @param dpeNames - Names of the data point elements to set
  @param values - Values to set for the data point elements
  @returns Boolean indicating successful setting of values
  """
  dpSetTimed(time: Time!, dpeNames: [String!]!, values: [JSON!]!): Boolean!

  """
  Sets values with a specific timestamp and waits for confirmation
  
  @param time - Source time for the value change
  @param dpeNames - Names of the data point elements to set
  @param values - Values to set for the data point elements
  @returns Boolean indicating successful setting of values
  """
  dpSetTimedWait(time: Time!, dpeNames: [String!]!, values: [JSON!]!): Boolean!

  """
  Sets data point alert attributes
  
  @param alerts - Alert(s) to set
  @param values - Attribute value(s) to set
  @returns Boolean indicating successful setting
  """
  alertSet(alerts: [AlertTimeInput!]!, values: [JSON!]!): Boolean!

  """
  Sets data point alert attributes with waiting for confirmation
  
  @param alerts - Alert(s) to set
  @param values - Attribute value(s) to set
  @returns Boolean indicating successful setting
  """
  alertSetWait(alerts: [AlertTimeInput!]!, values: [JSON!]!): Boolean!

  """
  Sets data point alert attributes with a specific timestamp
  
  @param time - Source time for the attribute change
  @param alerts - Alert(s) to set
  @param values - Attribute value(s) to set
  @returns Boolean indicating successful setting
  """
  alertSetTimed(time: Time!, alerts: [AlertTimeInput!]!, values: [JSON!]!): Boolean!

  """
  Sets data point alert attributes with a specific timestamp and waiting for confirmation
  
  @param time - Source time for the attribute change
  @param alerts - Alert(s) to set
  @param values - Attribute value(s) to set
  @returns Boolean indicating successful setting
  """
  alertSetTimedWait(time: Time!, alerts: [AlertTimeInput!]!, values: [JSON!]!): Boolean!

  # CNS (Central Navigation Service) Mutation Functions
  
  """
  Creates a new view with display name and optional separator
  
  @param view - ID path of the new view
  @param displayName - Multi-language display name
  @param separator - Optional separator (default: '.')
  @returns Boolean indicating successful creation
  """
  cnsCreateView(view: String!, displayName: JSON!, separator: JSON): Boolean!

  """
  Create a tree or sub-tree
  
  @param cnsParentPath - Path of parent element (view, tree, or node)
  @param tree - Tree structure to add
  @returns Boolean indicating successful creation
  """
  cnsAddTree(cnsParentPath: String!, tree: CnsTreeNodeInput!): Boolean!

  """
  Adds a new node to a tree or sub-tree
  
  @param cnsParentPath - ID path of parent node (must be node, not view)
  @param name - ID of new node
  @param displayName - Multi-language display name
  @param dp - Optional data point element (default: '')
  @returns Boolean indicating successful creation
  """
  cnsAddNode(cnsParentPath: String!, name: String!, displayName: JSON!, dp: String): Boolean!

  """
  Replaces a tree or sub-tree with new tree
  
  @param cnsPath - ID path of tree/node to replace
  @param tree - New tree structure
  @returns Boolean indicating successful change
  """
  cnsChangeTree(cnsPath: String!, tree: CnsTreeNodeInput!): Boolean!

  """
  Delete a tree, sub-tree, or node
  
  @param cnsPath - ID path of element to delete
  @returns Boolean indicating successful deletion
  """
  cnsDeleteTree(cnsPath: String!): Boolean!

  """
  Delete a view with all its trees
  
  @param view - ID path of the view
  @returns Boolean indicating successful deletion
  """
  cnsDeleteView(view: String!): Boolean!

  """
  Sets/adds property for node as key/value pair
  
  @param cnsPath - ID path of the node
  @param key - Property name
  @param value - Property value
  @param valueType - Type of value
  @returns Boolean indicating successful setting
  """
  cnsSetProperty(cnsPath: String!, key: String!, value: JSON!, valueType: CtrlType!): Boolean!

  """
  Sets OPC UA address configuration for a data point
  
  @param datapointName - Name of the data point (e.g., "TestMe.")
  @param driverNumber - Driver number for the OPC UA driver (default: 2)
  @param addressDirection - Direction of the address (input/output) (default: 2)
  @param addressDataType - Data type of the address (default: 750 (float)
  @param serverName - Name of the OPC UA server
  @param subscriptionName - Name of the subscription
  @param nodeId - OPC UA node ID
  @returns Boolean indicating successful configuration
  """
  setOpcUaAddress(
    datapointName: String!,
    driverNumber: Int!,
    addressDirection: Int!,
    addressDataType: Int!,
    serverName: String!,
    subscriptionName: String!,
    nodeId: String!
  ): Boolean!
}

"""
Subscription type for real-time data point updates
"""
type Subscription {
  """
  Establishes a connection to receive updates for specified data point elements
  
  @param dpeNames - Names of the data point elements to connect to
  @param answer - Whether to receive initial values immediately
  @returns Stream of data point updates
  """
  dpConnect(dpeNames: [String!]!, answer: Boolean): DpConnectUpdate!

  """
  Connects to receive updates for a single query
  
  @param query - SQL-like query to define data points to monitor
  @param answer - Whether to receive initial values immediately
  @param blockingTime - Time to collect query results
  @returns Stream of query updates
  """
  dpQueryConnectSingle(query: String!, answer: Boolean, blockingTime: Int): DpQueryConnectUpdate!

  """
  Connects to receive updates for all matching query results
  
  @param query - SQL-like query to define data points to monitor
  @param answer - Whether to receive initial values immediately
  @param blockingTime - Time to collect query results
  @returns Stream of all query updates
  """
  dpQueryConnectAll(query: String!, answer: Boolean, blockingTime: Int): DpQueryConnectUpdate!
}

"""
Methods for managing data point types
"""
type DataPointTypeMutation {
  """
  Retrieves the structure of a data point type
  
  @param dpt - Name of the data point type
  @param includeSubTypes - Whether to include subtypes
  @returns Structure of the data point type
  """
  dpTypeGet(dpt: String!, includeSubTypes: Boolean): DpTypeNode!

  """
  Creates a new data point type tree
  
  @param startNode - The first node of the data point type tree
  @returns Boolean indicating successful creation
  """
  dpTypeCreate(startNode: DpTypeNodeInput!): Boolean!

  """
  Changes an existing data point type tree
  
  @param startNode - The top node of the data point type tree to replace
  @returns Boolean indicating successful change
  """
  dpTypeChange(startNode: DpTypeNodeInput!): Boolean!

  """
  Deletes an existing data point type
  
  @param dpt - Name of the data point type to delete
  @returns Boolean indicating successful deletion
  """
  dpTypeDelete(dpt: String!): Boolean!

  """
  Retrieves references to other DPTs in a DPT
  
  @param dpt - Name of the data point type to check
  @returns Object with reference names and their corresponding paths
  """
  dpGetDpTypeRefs(dpt: String!): DpTypeReferences!

  """
  Returns all DPTs and DPs that contain a specific DPT as a reference
  
  @param reference - Name of the DPT reference to check
  @returns Object with DPT names and corresponding data point element paths
  """
  dpGetRefsToDpType(reference: String!): DpTypeReferences!
}


# Supporting Complex Types

"""
Version information for WinCC OA API and system
"""
type WinccoaVersionDetails {
  api: WinccoaApiVersion!
  winccoa: WinccoaSystemVersion!
}

"""
API version information
"""
type WinccoaApiVersion {
  version: Int!
}

"""
WinCC OA system version information
"""
type WinccoaSystemVersion {
  display: String!
  major: Int!
  minor: Int!
  numeric: Int!
  numeric_full: Int!
  patch: Int!
  platform: String!
  revision: Int!
  version: String!
}

"""
Represents a CNS tree node structure
"""
type CnsTreeNode {
  name: String!
  displayName: JSON!
  dp: String!
  children: [CnsTreeNode!]!
}

input CnsTreeNodeInput {
  name: String!
  displayName: JSON!
  dp: String
  children: [CnsTreeNodeInput!]
}

"""
Represents a data point type node in the type hierarchy
"""
type DpTypeNode {
  name: String!
  type: ElementType!
  refName: String
  children: [DpTypeNode!]
  newName: String
}

input DpTypeNodeInput {
  name: String!
  type: ElementType!
  refName: String
  children: [DpTypeNodeInput!]
  newName: String
}

"""
Results of data point type reference queries
"""
type DpTypeReferences {
  dptNames: [String!]!
  dpePaths: [String!]!
}

"""
Represents an alert time with additional details
"""
type AlertTime {
  time: Time!
  count: Int!
  dpe: String!
}

input AlertTimeInput {
  time: Time!
  count: Int!
  dpe: String!
}

"""
Result of alert period query
"""
type AlertPeriodResult {
  alertTimes: [AlertTime!]!
  values: [JSON!]!
}

"""
Update type for data point connections
"""
type DpConnectUpdate {
  dpeNames: [String!]!
  values: [JSON!]!
  type: String! # Enum for connection update type
  error: JSON
}

"""
Update type for data point query connections
"""
type DpQueryConnectUpdate {
  values: [[JSON!]!]!
  type: String! # Enum for connection update type
  error: JSON
}
